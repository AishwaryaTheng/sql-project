create database import
use import

--Tasks to be performed:
--1. Display the number of states present in the LocationTable. 
select * from [dbo].[Location]
select count(state) from [dbo].[Location]

--2. How many products are of regular type?
select * from [dbo].[Product]
select count(Type) from [dbo].[Product] where type='Regular'

--3. How much spending has been done on marketing of product ID 1?
select * from [dbo].[Fact]
select Sum(Total_Expenses) from [dbo].[Fact] where ProductId=1

--4. What is the minimum sales of a product?
select min(Sales) from [dbo].[Fact]

--5. Display the max Cost of Good Sold (COGS). 
select max(COGS) from [dbo].[Fact]

--6. Display the details of the product where product type is coffee.
select * from [dbo].[Product] where Product_Type='coffee'

--7. Display the details where total expenses are greater than 40.
select * from [dbo].[Fact] where Total_Expenses>40

--8. What is the average sales in area code 719?
select avg(Sales) from [dbo].[Fact] where Area_Code=719

--9. Find out the total profit generated by Colorado state.
select * from [dbo].[Fact]
select * from [dbo].[Location]

select sum(Profit) from [dbo].[Fact] as a inner join [dbo].[Location] as b on a.Area_Code=b.Area_Code where  State='Colorado'

--10. Display the average inventory for each product ID.
select ProductId,avg(Inventory) as Avg_Inventory from [dbo].[Fact]
group by ProductId 

--11. Display state in a sequential order in a Location Table.
select State from [dbo].[Location]
order by State asc

--12. Display the average budget of the Product where the average budget margin should be greater than 100.
select avg(Budget_Sales)from [dbo].[Fact] where Budget_Margin>100

--13. What is the total sales done on date 2010-01-01?
select sum(Sales) from [dbo].[Fact] where Date='2010-01-01'

--14. Display the average total expense of each product ID on an individual date.
select Date,ProductId,avg(Total_Expenses) from [dbo].[Fact]
group by ProductId,Date

--15. Display the table with the following attributes such as date, productID, product_type, product, sales, profit, state, area_code. 

select a.Date,a.ProductId,b.Product_Type,b.Product,a.Sales,a.Profit,c.State,a.Area_Code from [dbo].[Fact]
as a inner join [dbo].[Product] as b on a.ProductId=b.ProductId inner join [dbo].[Location] as c on a.Area_Code=c.Area_Code

--16. Display the rank without any gap to show the sales wise rank
select *,dense_rank()over(order by Sales Asc) as sales_wise_rank from [dbo].[Fact]

--17. Find the state wise profit and sales. 
select b.State,sum(a.Profit) as PROFIT,sum(a.Sales) as SALES from [dbo].[Fact]
as a inner join [dbo].[Location] as b on a.Area_Code=b.Area_Code
group by b.State

--18. Find the state wise profit and sales along with the productname.
select b.State,sum(a.Profit) as PROFIT,sum(a.Sales) as SALES,c.Product 
from [dbo].[Fact]as a inner join [dbo].[Location] as b on a.Area_Code=b.Area_Code
inner join [dbo].[Product] as c on a.ProductId=c.ProductId
group by b.State,c.Product

--19. If there is an increase in sales of 5%, calculate the increased sales.
select F.[Date], F.ProductID, P.Product_Type, P.Product, F.Sales, F.Profit, L.State, L.Area_Code,
      case when F.Sales * 1.05 > F.Budget_Sales then F.Sales * 1.05 - F.Budget_Sales 
	   else 0 
	   end as IncreasedSales
       from [dbo].[Fact] F
JOIN [dbo].[Product] P ON F.ProductID = P.ProductID
JOIN [dbo].[Location] L ON F.Area_Code = L.Area_Code;

--20. Find the maximum profit along with the product ID and producttype.
select b.ProductId,b.Product_Type,max(a.Profit) as MAX_PROFIT from [dbo].[Fact]as a
inner join [dbo].[Product] as b on a.ProductId=b.ProductId
group by b.ProductId,b.Product_Type

--21. Create a stored procedure to fetch the result according to the product type from Product Table.
create procedure sp_result
@product_type varchar(20)
as
begin
select * from [dbo].[Product] where Product_Type=@product_type
end

 sp_result 'Espresso'

--22. Write a query by creating a condition in which if the total expenses is less than 60 then it is a profit or else loss.
select 
Case
when Total_Expenses < 60 then 'PROFIT'
else 'LOSS'
end as comment,Total_Expenses
from [dbo].[Fact]

--23. Give the total weekly sales value with the date and product ID details. Use roll-up to pull the data in hierarchical order.
select Date,ProductId,sum(Sales) as weekly_sales from [dbo].[Fact]
group by rollup (Date,ProductId)

--24. Apply union and intersection operator on the tables which consist of attribute area code.
Select Area_Code from [dbo].[Fact]
union
Select Area_Code from [dbo].[Location]

Select Area_Code from [dbo].[Fact]
intersect
Select Area_Code from [dbo].[Location]

--25. Create a user-defined function for the product table to fetch a particular product type based upon the user’s preference. 
create function fn_select_product(@product_type varchar(20))
returns table
as
return
(select Product_Type from [dbo].[Product] where Product_Type=@product_type)

select * from fn_select_product('Coffee')

--26. Change the product type from coffee to tea where product ID is 1 and undoit. 
begin transaction
update [dbo].[Product] set Product_Type='Tea' where ProductId=1

select * from [dbo].[Product] 

begin transaction
update [dbo].[Product] set Product_Type='Tea' where ProductId=1
rollback transaction

select * from [dbo].[Product]

--27. Display the date, product ID and sales where total expenses are between 100 to 200.
select Date,ProductId,Sales from [dbo].[Fact] where Total_Expenses between 100 and 200
order by ProductId

--28. Delete the records in the Product Table for regular type. 
delete [dbo].[Product] where Type='Regular'
select * from [dbo].[Product]

--29. Display the ASCII value of the fifth character from the column Product.
select ASCII (SUBSTRING(Product, 5, 1)) as ASCII_Value
from [dbo].[Product]